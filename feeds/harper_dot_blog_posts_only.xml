<?xml version='1.0' encoding='utf-8'?>
<rss version="2.0"><channel><title>Filtered: Harper Reed's Blog</title><link>https://harper.blog/</link><description>A filtered version of the feed from https://harper.blog/. Original content is attributed to the respective authors.</description><language>en-GB</language><pubDate>Tue, 13 May 2025 07:25:56 +0000</pubDate><attribution>This feed is a filtered version of the original feed available at https://harper.blog/. All content is attributed to the original author(s).</attribution><item><title>Basic Claude Code</title><link>https://harper.blog/2025/05/08/basic-claude-code/</link><description>&lt;p&gt;I really like this agentic coding thing. It is quite compelling in so many ways.&lt;/p&gt;
&lt;p&gt;Since I wrote &lt;a href="https://harper.blog/2025/02/16/my-llm-codegen-workflow-atm/"&gt;that original blog post&lt;/a&gt; a lot has happened in Claude land:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Claude Code&lt;/li&gt;
&lt;li&gt;MCP&lt;/li&gt;
&lt;li&gt;etc&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I have received hundreds (wat) of emails from people talking about their workflows and how they have used my workflow to get ahead. I have spoken at a few conferences, and taught a few classes about codegen. I have learned that computers really want to spellcheck codegen to codeine, who knew!&lt;/p&gt;





















  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
      
      
    
    
    
    


    
    
      
      

      


      

      
      
        
        
        
      
      
      
      

    
    

    
    
      
      
          &lt;img alt="" class="img  " height="600" src="https://harper.blog/2025/05/08/basic-claude-code/codegen_hu_cd1d3b7ef861df7d.webp" title="" width="400" /&gt;
      
    

  
  






  


&lt;p&gt;I was talking to a &lt;a href="https://www.elidedbranches.com/"&gt;friend&lt;/a&gt; the other day about how we are &lt;strong&gt;all totally fucked&lt;/strong&gt; and &lt;strong&gt;AI will take our jobs&lt;/strong&gt; (more on that in a later post), and she was like &amp;ldquo;you should write a post about claude code.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Here we go.&lt;/p&gt;
&lt;p&gt;Claude Code was released eight days after I wrote my original workflow blog post, and as I predicted, it made a lot of my post irrelevant. I have since migrated from Aider to Claude Code and not looked back. I still like Aider, and it has a distinct use, but Claude Code is a bit more useful atm.&lt;/p&gt;
&lt;p&gt;Claude Code is powerful, and a hell of a lot more expensive.&lt;/p&gt;
&lt;p&gt;My workflow is very similar to what it was before.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I chat with &lt;code&gt;gpt-4o&lt;/code&gt; to hone my idea&lt;/li&gt;
&lt;li&gt;I use the best reasoning model I can find to generate the spec. These days it is o1-pro or o3 (is o1-pro better than o3? Or do I feel like it is better cuz it takes longer?)&lt;/li&gt;
&lt;li&gt;I use the reasoning model to generate the prompts. Using an LLM to generate prompts is a beautiful hack. It makes boomers mad too.&lt;/li&gt;
&lt;li&gt;I save the spec.md, and the prompt_plan.md in the root of the project.&lt;/li&gt;
&lt;li&gt;I then type into claude code the following:&lt;/li&gt;
&lt;/ul&gt;





&lt;pre tabindex="0"&gt;&lt;code class="language-prompt"&gt;1. Open **@prompt_plan.md** and identify any prompts not marked as completed.
2. For each incomplete prompt:
    - Double-check if it's truly unfinished (if uncertain, ask for clarification).
    - If you confirm it's already done, skip it.
    - Otherwise, implement it as described.
    - Make sure the tests pass, and the program builds/runs
    - Commit the changes to your repository with a clear commit message.
    - Update **@prompt_plan.md** to mark this prompt as completed.
3. After you finish each prompt, pause and wait for user review or feedback.
4. Repeat with the next unfinished prompt as directed by the user.&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The magic with this prompt is that it checks the prompt plan. Looks for things that are not marked as completed, then does the next remaining task. It commits it to git, and then updates the prompt plan with what is complete. It then pops up and asks you to continue once it is done. 🤌&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I then kick back and tell claude &lt;code&gt;yes&lt;/code&gt; while it does the work. It will pop up for feedback, and magic happens.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lots more cookie clicker.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This works super well. There are a few superpowers you can embed in your process that will really help.&lt;/p&gt;
&lt;h2 id="defensive-coding"&gt;Defensive coding!&lt;/h2&gt;
&lt;h3 id="testing"&gt;Testing&lt;/h3&gt;
&lt;p&gt;Testing and test-driven development is a must. I highly recommend really engaging in building out a robust TDD practice.&lt;/p&gt;
&lt;p&gt;I was a TDD hater. I was bad at it and I felt like I was wasting time. I was not correct. Lol. I recognize that, and we built in a lot of testing into our companies and projects over the past few decades. Most of the testing was added AFTER the core work was done. This is fine for humans.&lt;/p&gt;
&lt;p&gt;THIS IS BAD FOR ROBOTS.&lt;/p&gt;
&lt;p&gt;The robots LOVE TDD. Seriously. They eat it up.&lt;/p&gt;
&lt;p&gt;With TDD you have the robot friend build out the test, and the mock. Then your next prompt you build the mock to be real. And the robot just loves this. It is the most effective counter to hallucination and LLM scope drift I have found. It really helps the robots to stay on task.&lt;/p&gt;
&lt;h3 id="linting"&gt;Linting&lt;/h3&gt;
&lt;p&gt;I am such a fan of linting. It is so nice. Ruff is a wonderful product. Biome is cool. Clippy is fun (and a good name).&lt;/p&gt;
&lt;p&gt;For whatever reason the ROBOTS love to run a good linter.&lt;/p&gt;
&lt;p&gt;Building in the practice to run the linter constantly has kept a lot of bugs away, and kept the code more maintainable and easier to read. You know this already.&lt;/p&gt;
&lt;p&gt;Add in a good formatter and everything is beautiful.&lt;/p&gt;
&lt;h3 id="pre-commit-hooks"&gt;Pre Commit hooks&lt;/h3&gt;
&lt;p&gt;The real magic of all this is to add these tasks to a pre-commit hook. I recommend the pre-commit python package. You can easily use it via an &lt;code&gt;uv tools install pre-commit&lt;/code&gt; command and then just build out a nice &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt; file and bam. Every time you try and commit it will run all these wonderful tests, type checking, linting, and whatnot to make sure your code is A+++ would execute again.&lt;/p&gt;
&lt;p&gt;This is a great hack for working with Claude Code. The robot REALLLLLY wants to commit. So when you instruct it to do some code and then commit (like I did above) it will make wild code changes, commit the code, inevitably fuck it all up and then have to fix it.&lt;/p&gt;
&lt;p&gt;This is nice cuz it doesn&amp;rsquo;t clog your GitHub actions with a bunch of linting, formatting, and type checking execution that doesn&amp;rsquo;t pass cuz the robot was in a mood.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A funny thing about claude is it CANNOT for the life of it figure out how to use &lt;code&gt;uv&lt;/code&gt; correctly. It will pip install shit all over the place if you are not careful. And if you instruct it to use &lt;code&gt;uv&lt;/code&gt; it will just use &lt;code&gt;uv pip install.&lt;/code&gt; Maybe AGI isn&amp;rsquo;t going to happen in June. so sad.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id="claudemd-and-commands"&gt;Claude.md and commands&lt;/h3&gt;
&lt;p&gt;These are both really simple additions that can squeeze a lot out.&lt;/p&gt;





















  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
      
      
    
    
    
    


    
    
      
      

      


      

      
      
        
        
        
      
      
      
      

    
    

    
    
      &lt;figure class=""&gt;
      
          &lt;img alt="Jesse at the studio, Sept 15, 2023, Ricoh GRiii" class="img " height="2000" src="https://harper.blog/2025/05/08/basic-claude-code/_SDI8149_hu_1c5b96d1b81c0f85.webp" title="" width="2000" /&gt;
      
        &lt;figcaption class="caption-Jesse-at-the-studio-Sigma-fp-11152023" id="caption-Jesse at the studio, Sigma fp, 11/15/2023"&gt;
          Jesse at the studio, Sigma fp, 11/15/2023
        &lt;/figcaption&gt;
      &lt;/figure&gt;
    

  
  







&lt;p&gt;I stole a &lt;a href="https://github.com/harperreed/dotfiles/blob/master/.claude/CLAUDE.md"&gt;CLAUDE.md&lt;/a&gt; from my friend &lt;a href="https://fsck.com/"&gt;Jesse Vincent&lt;/a&gt; who did an &lt;a href="https://github.com/obra/dotfiles/blob/main/.claude/CLAUDE.md"&gt;awful lot of work on making it very robust&lt;/a&gt;. It is quite nice. Some things that are built into it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a light version of the big daddy rule.&lt;/li&gt;
&lt;li&gt;instructions on how to do TDD&lt;/li&gt;
&lt;li&gt;stylistic instructions on how I like to code.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://instagram.com/clintecker"&gt;@clint&lt;/a&gt; configured his CLAUDE.md to call him MR BEEF and it is currently embedding info about MR BEEF in our all documentation: &amp;ldquo;If you&amp;rsquo;re stuck, stop and ask for help—MR BEEF may know best.&amp;rdquo;. While typing this out, I decided to make my CLAUDE.md file call me &amp;ldquo;Harp Dog.&amp;rdquo; This is a feature, not a bug.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The commands are also really nice. You can see some of mine in my dotfiles &lt;a href="https://github.com/harperreed/dotfiles/tree/master/.claude/commands"&gt;here&lt;/a&gt;.&lt;/p&gt;





















  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
      
      
    
    
    
    


    
    
      
      

      


      

      
      
        
        
        
      
      
      
      

    
    

    
    
      
      
          &lt;img alt="" class="img  " height="500" src="https://harper.blog/2025/05/08/basic-claude-code/commands_hu_1e455eb8ce61f4a0.webp" title="" width="814" /&gt;
      
    

  
  







&lt;p&gt;I used to use the commands way more, but it is a really great way to get a lot out of regularly used prompts. You can also pass arguments to the commands. For instance in my github issues command, you pass the issue number that you want claude to look at: &lt;code&gt;/user:gh-issue #45&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Claude will now go and run through the &amp;ldquo;prompt&amp;rdquo; script that is defined in the &lt;code&gt;gh-issue.md&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;You can also put these commands in a project directory, and make a custom CLAUDE.md in the project directory. I do this to make hugo, rust, go, or javascript specific commands per project.&lt;/p&gt;
&lt;h2 id="continue"&gt;&amp;ldquo;Continue&amp;rdquo;&lt;/h2&gt;





















  
  
    
    &lt;img alt="" class="img   " height="" src="https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExNDk3ZTZpdWYwdG5sdmpnaTJqNzJhYXlvcmp6bnNmdmhxaGdoeHJ4MyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l2Je3fIeeXyYEM85G/giphy.gif" title="" width="" /&gt;
  
  







&lt;p&gt;Sometimes I feel like that bird that home got to hit &amp;ldquo;y&amp;rdquo;. I am just writing &amp;ldquo;continue&amp;rdquo; or pressing up and pasting in the same prompt.&lt;/p&gt;
&lt;p&gt;Most of the time the plans are about 8–12 steps. I can usually get through a Greenfield development plan in about 30–45 minutes regardless of apparent complexity or language.&lt;/p&gt;
&lt;p&gt;I was talking through with my friend Bob and he did not believe it. I asked him &amp;ldquo;name a thing to build, a language to build it in - and let&amp;rsquo;s see!&amp;rdquo;&lt;/p&gt;





















  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
      
      
    
    
    
    


    
    
      
      

      


      

      
      
        
        
        
      
      
      
      

    
    

    
    
      &lt;figure class=""&gt;
      
          &lt;img alt="" class="img " height="4000" src="https://harper.blog/2025/05/08/basic-claude-code/R0000693_hu_5416e912274e26ae.webp" title="" width="5000" /&gt;
      
        &lt;figcaption class="caption-Bob-Swartz-Ricoh-GRiiix-11172024" id="caption-Bob Swartz, Ricoh GRiiix, 11/17/2024"&gt;
          Bob Swartz, Ricoh GRiiix, 11/17/2024
        &lt;/figcaption&gt;
      &lt;/figure&gt;
    

  
  







&lt;p&gt;He was like &amp;ldquo;ok. A basic interpreter in C.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;This wasn&amp;rsquo;t ideal. I don&amp;rsquo;t know C. I don&amp;rsquo;t really know how to write an interpreter, nor do I really want to. But fuck it.&lt;/p&gt;
&lt;p&gt;I followed the above steps and Claude Code did great. We have &lt;a href="https://github.com/harperreed/basic"&gt;a working basic interpreter&lt;/a&gt;. The first version worked within an hour. I futzed with it for a few more hours and it is pretty good. Would it ship it in 1982? Probably not. You can see the &lt;a href="https://raw.githubusercontent.com/harperreed/basic/refs/heads/main/docs/prompt_plan.md"&gt;prompt plan here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="the-team"&gt;The Team&lt;/h2&gt;
&lt;p&gt;Our entire team is using Claude Code currently. We are all approximately following the above process with a lot of person tweaks.&lt;/p&gt;
&lt;p&gt;We are doing way way higher test coverage than we have ever done. We have better code, and it seems to be just as effective as the horrible code we wrote in the past. It is fun to glance at people working and see claude code running in ghostty, in vscode terminal, in zed terminal, and messing with python notebooks.&lt;/p&gt;





















  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
      
      
    
    
    
    


    
    
      
      

      


      

      
      
        
        
        
      
      
      
      

    
    

    
    
      
      
          &lt;img alt="" class="img  " height="330" src="https://harper.blog/2025/05/08/basic-claude-code/dril_hu_7b512dcb18505a6c.webp" title="" width="505" /&gt;
      
    

  
  







&lt;p&gt;Someone who has a lot of tokens, please help me budget this. My family is dying.&lt;/p&gt;
&lt;h2 id="thanks"&gt;thanks&lt;/h2&gt;
&lt;p&gt;To all the folks who keep emailing me. It is really fun and nice to hear about your workflows, and projects. I really appreciate it. Keep em coming!&lt;/p&gt;

                                &lt;figure&gt;
                                    &lt;img alt="R0000693.jpeg" height="4000" src="https://harper.blog/2025/05/08/basic-claude-code/R0000693.jpeg" width="5000" /&gt;
                                    
                                &lt;/figure&gt;
                                &lt;figure&gt;
                                    &lt;img alt="_SDI8149.jpg" height="2000" src="https://harper.blog/2025/05/08/basic-claude-code/_SDI8149.jpg" width="2000" /&gt;
                                    
                                &lt;/figure&gt;
                                &lt;figure&gt;
                                    &lt;img alt="codegen.png" height="600" src="https://harper.blog/2025/05/08/basic-claude-code/codegen.png" width="400" /&gt;
                                    
                                &lt;/figure&gt;
                                &lt;figure&gt;
                                    &lt;img alt="commands.png" height="500" src="https://harper.blog/2025/05/08/basic-claude-code/commands.png" width="814" /&gt;
                                    
                                &lt;/figure&gt;
                                &lt;figure&gt;
                                    &lt;img alt="dril.jpg" height="330" src="https://harper.blog/2025/05/08/basic-claude-code/dril.jpg" width="505" /&gt;
                                    
                                &lt;/figure&gt;
                        
                        &lt;hr /&gt;
                        &lt;p&gt;Thank you for using RSS. I appreciate you. &lt;a href="mailto:harper&amp;#64;modest.com"&gt;Email me&lt;/a&gt;&lt;/p&gt;</description><pubDate>Thu, 08 May 2025 00:00:00 -0500</pubDate></item><item><title>An LLM Codegen Hero's Journey</title><link>https://harper.blog/2025/04/17/an-llm-codegen-heros-journey/</link><description>&lt;p&gt;I have spent a lot of time since my &lt;a href="https://harper.blog/2025/02/16/my-llm-codegen-workflow-atm/"&gt;blog post&lt;/a&gt; about my LLM workflow talking to folks about codegen and how to get started, get better, and why it is interesting.&lt;/p&gt;
&lt;p&gt;There has been an incredible amount of energy and interest in this topic. I have received a ton of emails from people who are working to figure all of this out. I started to notice that many people are struggling to figure out how to start, and how it all fits together. Then I realized that I have been hacking on this process since 2023 and I have seen some shit. Lol.&lt;/p&gt;
&lt;p&gt;I was talking about this with friends (Fisaconites&amp;rsquo;s represent) and I sent this message in response to a thread about AI assisted agents, and editors:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;if i were starting out, i don&amp;rsquo;t know if it is helpful to jump right into the &amp;ldquo;agent&amp;rdquo; coders. It is annoying and weird. having walked a few people through this (successfully, and not successfully) I find that the &amp;ldquo;hero&amp;rsquo;s journey&amp;rdquo; of starting with the Copilot, moving to the copy and paste from Claude web, to the Cursor/continue, to the fully automated &amp;ldquo;agents&amp;rdquo; seems to be a successful way to adopt these things.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This lead me to start thinking a lot about the journey and how to get started using agentic coding:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The caveat is that this is largely for people with experience. If you don’t have much dev experience, then fuck it - jump to the end. &lt;strong&gt;Our brains are often ruined by the rules of the past.&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id="a-journey-of-sight-and-sound"&gt;A journey of sight and sound&lt;/h2&gt;





















  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
      
      
    
    
    
    


    
    
      
      

      


      

      
      
        
        
        
      
      
      
      

    
    

    
    
      &lt;figure class=""&gt;
      
          &lt;img alt="Harper is very trustworthy" class="img " height="768" src="https://harper.blog/2025/04/17/an-llm-codegen-heros-journey/journey-harper_hu_150720cd34953896.webp" title="" width="1024" /&gt;
      
        &lt;figcaption class="caption-Your-thoughtful-guide-Harper-iPhone-X-6102018" id="caption-Your thoughtful guide: Harper. iPhone X, 6/10/2018"&gt;
          Your thoughtful guide: Harper. iPhone X, 6/10/2018
        &lt;/figcaption&gt;
      &lt;/figure&gt;
    

  
  






  


&lt;p&gt;This is my journey. It is largely the path I took. I think you could speed run it if you were compelled. I don’t think you need to follow every step, but I do think every step is additive.&lt;/p&gt;
&lt;p&gt;Here are the steps:&lt;/p&gt;
&lt;h3 id="step-1-get-out-of-bed-with-wonder-and-optimism"&gt;Step 1: Get out of bed with wonder and optimism&lt;/h3&gt;
&lt;p&gt;Lol. Just kidding. Who has time for that? It may help, but the world is falling apart and all we got is codegen to distract us.&lt;/p&gt;
&lt;p&gt;It does help to assume that these type of workflows could work and could be additive. If you hate LLMs and don’t think it will work, then you will not be successful here. ¯\_(ツ)_/¯&lt;/p&gt;
&lt;h3 id="step-2-start-with-ai-assisted-autocomplete"&gt;Step 2: Start with AI-assisted autocomplete&lt;/h3&gt;
&lt;p&gt;This is the real step one! You need to spend enough time in the IDE context to know how well you would work with &lt;a href="https://en.wikipedia.org/wiki/Code_completion"&gt;intellisense&lt;/a&gt;, &lt;a href="https://zed.dev/blog/out-of-your-face-ai"&gt;zed autocomplete&lt;/a&gt;, &lt;a href="https://copilot.github.com/"&gt;Copilot&lt;/a&gt;, etc. It gives you an idea of how the LLM is working - and prepares you for the stupid shit it will often recommend.&lt;/p&gt;
&lt;p&gt;People seem to want to skip this step and just jump to the end. Then they are like “this LLM is a piece of shit and can’t do anything right!” Which is not accurate, but also can be true. The magic is in the nuance. Or as I like to remember: &lt;em&gt;life is confusing&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id="step-3-start-using-copilot-as-more-than-autocomplete"&gt;Step 3: Start using Copilot as more than autocomplete&lt;/h3&gt;
&lt;p&gt;Once you have a good process in place with the autocomplete and you are not mad &lt;em&gt;all&lt;/em&gt; of the time, you can move on to the magic of talking to Copilot.&lt;/p&gt;
&lt;p&gt;VS Code has a pane where you can Q&amp;amp;A with Copilot and it will help you with your code, etc. It is pretty cool. You can have a nice convo about your code, and it will be thoughtful and help you solve whatever query you asked.&lt;/p&gt;
&lt;p&gt;However, using Copilot is like using a time machine to talk to ChatGPT in 2024. It isn’t &lt;em&gt;that&lt;/em&gt; great.&lt;/p&gt;
&lt;p&gt;You will be wanting more.&lt;/p&gt;
&lt;h3 id="step-4-move-to-copying-and-pasting-code-into-claude-or-chatgpt"&gt;Step 4: Move to copying and pasting code into Claude or ChatGPT&lt;/h3&gt;
&lt;p&gt;You start to satisfy your curiosity by pasting code into the browser based foundational model and asking “WHY CODE BROKE??” And then having LLM respond with a coherent and helpful response.&lt;/p&gt;
&lt;p&gt;You will be AMAZED! The results are going to blow your mind. You are going to start to build lots of weird shit, and doing really fun things with code again. Mostly cuz it cut out the entire debugging process.&lt;/p&gt;
&lt;p&gt;You can also do wild things like paste in a Python script and tell the LLM “make this into go” and it will just &lt;em&gt;make it into go&lt;/em&gt;. You will start thinking “I wonder if I can one shot this.”&lt;/p&gt;
&lt;p&gt;Copilot will start to look like 2004 autocomplete. It is handy, but not really necessary.&lt;/p&gt;
&lt;p&gt;This will lead you down a couple sub paths:&lt;/p&gt;
&lt;h4 id="you-will-start-to-prefer-one-model-cuz-of-vibes"&gt;You will start to prefer one model cuz of vibes&lt;/h4&gt;
&lt;p&gt;This is the unfortunate first step towards the vibe in vibe coding. You will start to prefer how one of the big models talk to you. It is feelings tho. Kind of weird. You will find yourself thinking “I like how Claude makes me feel.”&lt;/p&gt;
&lt;p&gt;Many developers seem to like Claude. I use both, but mostly Claude for code related things. The vibe with Claude is just better.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You have to pay for them to get the good stuff. So many friends are like “This is a piece of shit” and then you find out they are using a free model that barely works. Lol. This was more of an issue when the free version was ChatGPT 3.5, but make sure you are using a capable model before you throw the entire premise out.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h4 id="you-will-start-thinking-about-how-to-make-things-go-faster"&gt;You will start thinking about how to make things go faster&lt;/h4&gt;
&lt;p&gt;After copying and pasting code into Claude for a few weeks you are going to realize that this is annoying. You are going to start working through context packing, and trying to fit more of your code into the LLM context window.&lt;/p&gt;
&lt;p&gt;You will experiment with &lt;a href="https://repomix.com/"&gt;repomix&lt;/a&gt;, &lt;a href="https://github.com/donoceidon/repo2txt"&gt;repo2txt&lt;/a&gt;, and other code context tools. Just so that you can slam your entire codebase into the Claude context window. There is a chance that you will even start writing shell scripts (well Claude will write them) to help make this process easier.&lt;/p&gt;
&lt;p&gt;This is a turning point.&lt;/p&gt;
&lt;h3 id="step-5-use-an-ai-enabled-ide-cursor-windsurf-"&gt;Step 5: Use an AI enabled IDE (Cursor, Windsurf? )&lt;/h3&gt;
&lt;p&gt;Then a friend will say “why don’t you just use &lt;a href="https://cursor.sh/"&gt;Cursor&lt;/a&gt;?”&lt;/p&gt;
&lt;p&gt;It will completely blow your mind. All the magic you just experienced by copying and pasting is now available in your IDE. It is faster, it is fun, and it is close to magic.&lt;/p&gt;
&lt;p&gt;At this point you are paying for like 5 different LLMs - what is another $20 a month.&lt;/p&gt;
&lt;p&gt;It works super well, and you feel way way more productive.&lt;/p&gt;
&lt;p&gt;You will start playing with the agentic coding features built directly into the editors. It will &lt;em&gt;basically&lt;/em&gt; work. But you can see a destination on the horizon that may be better.&lt;/p&gt;
&lt;h3 id="step-6-you-start-planning-before-you-code"&gt;Step 6: You start planning before you code&lt;/h3&gt;
&lt;p&gt;Suddenly you find yourself building out very robust specs, PRDs, and to-do docs that you can pipe into the IDEs agent, or into Claude web.&lt;/p&gt;
&lt;p&gt;You have never “written” so much documentation. You start to use other LLMs to write more robust documentation. You are transposing docs from one context (PRD) to another (“Can you make this into prompts”). You start to use the LLM to design your codegen prompts.&lt;/p&gt;
&lt;p&gt;You are saying the word “&lt;a href="https://en.wikipedia.org/wiki/Waterfall_model"&gt;waterfall&lt;/a&gt;” with a lot less disdain. If you are old, you may be fondly remembering the late 90s and early 2000s and wonder “is this what Martin Fowler felt like before &lt;a href="https://en.wikipedia.org/wiki/Agile_software_development"&gt;2001&lt;/a&gt;?”&lt;/p&gt;
&lt;p&gt;In the world of codegen: The spec is the &lt;a href="https://en.wikipedia.org/wiki/Godhead"&gt;godhead&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="step-7-you-start-playing-with-aider-to-enable-quicker-loops"&gt;Step 7: You start playing with aider to enable quicker loops&lt;/h3&gt;
&lt;p&gt;At this point you are ready to start getting into the &lt;strong&gt;good stuff&lt;/strong&gt;. The codegen previously required you to be involved, and paying attention. But it is 2025! Who wants to code with their fingers?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One other path that lots of friends are experimenting with is to code with your voice. To start instruct aider via a whisper client. It is hilarious and fun. MacWhisper is a very good tool for this locally. Aqua, and superwhisper are nice but cost more. They may use cloud services to do the inference. I prefer local.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Trying out aider is a wild experience. You start it up, it instantiates itself into your project. You put your query directly into aider, and it just kind of does what you asked. It asks for permission to act, and gives you a framework to get things done, and then acts. It completes the task, and the commits to your repository. You no longer are so worried about one shotting tasks. you will just have aider do it in a few steps.&lt;/p&gt;
&lt;p&gt;You start building out rulesets for the LLM to follow. You learn about the “&lt;a href="https://www.reddit.com/r/cursor/comments/1joapwk/comment/mkqg8aw/"&gt;Big Daddy&lt;/a&gt;” rule, or the “no deceptions” addition to your prompts. You start be really good at prompting the robot.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;It works.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Eventually you don’t even open up an IDE - you are just a terminal jockey now.&lt;/p&gt;
&lt;p&gt;You spend your time watching the robot do your job.&lt;/p&gt;
&lt;h3 id="step-8-you-lean-all-the-way-into-agentic-coding"&gt;Step 8: You lean all the way into agentic coding&lt;/h3&gt;
&lt;p&gt;You are now using an agent to code for you. The results are pretty good. There are a few times when you have no idea what’s going on. But then you remember you can just ask it.&lt;/p&gt;
&lt;p&gt;You start to experiment with &lt;a href="https://docs.anthropic.com/en/docs/agents-and-tools/claude-code/overview"&gt;Claude Code&lt;/a&gt;, &lt;a href="https://cline.bot/"&gt;Cline&lt;/a&gt;, etc. You are super happy to be able to use a reasoning model (&lt;a href="https://aws.amazon.com/bedrock/deepseek/"&gt;deepseek&lt;/a&gt;!) and a coding model (&lt;a href="https://www.anthropic.com/claude/sonnet"&gt;Claude sonnet 3.7&lt;/a&gt;) together to start removing planning steps.&lt;/p&gt;
&lt;p&gt;You are doing wild stuff like running 3-5 concurrent sessions. Just tabbing through terminals watching robots code.&lt;/p&gt;
&lt;p&gt;You will start coding defensively:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;really hardcore test coverage&lt;/li&gt;
&lt;li&gt;thinking about &lt;a href="https://github.com/formal-land/coq-of-rust"&gt;formal verification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;using memory safe languages&lt;/li&gt;
&lt;li&gt;choosing languages based on compiler verbosity to help pack the context window&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You will think long and hard about how to make sure that the thing you are building just gets built, safely without intervention.&lt;/p&gt;
&lt;p&gt;You will spend &lt;strong&gt;SO&lt;/strong&gt; much money on tokens. You will also use up all your GitHub action hours running all the wild tests that you are running to make sure that the code is built safely.&lt;/p&gt;
&lt;p&gt;It feels good. You are not mad about not coding.&lt;/p&gt;
&lt;h3 id="step-9-you-let-the-agent-code-and-you-play-video-games"&gt;Step 9: You let the agent code, and you play video games&lt;/h3&gt;
&lt;p&gt;Suddenly, you are there. You are at the destination. Well, kind of - but you see where we are going. You start to worry about software jobs. Your friends are being laid off, and they can’t get new jobs. It feels different this time around.&lt;/p&gt;
&lt;p&gt;When you talk to your peers they think of you as a religious zealot cuz you are working within a different context than they are. You tell them “omg you have to try out agentic coding!” Maybe you add “I hate the word agentic” just to show that you have not drank 200 gallons of kool-aid. But you have. The world seems brighter cuz you are so productive with your code.&lt;/p&gt;
&lt;p&gt;It doesn’t matter. The paradigm has shifted. Kuhn could write a book about the confusion happening during this time.&lt;/p&gt;
&lt;p&gt;Nobody can see this because they didn’t go through the journey to get here. But those who have are agreeing and sharing their own tips around the journey, and debating the destination.&lt;/p&gt;
&lt;p&gt;Now that you are knee-deep in letting robots do the work, you can really focus on all those gameboy games you have been wanting to play. There is a lot of downtime. And when the robot is done with a task, it will ask “should I continue” and you type &lt;strong&gt;yes&lt;/strong&gt; and go back to Tetris.&lt;/p&gt;
&lt;p&gt;Very strange. Unsettling, even.&lt;/p&gt;
&lt;h2 id="the-acceleration"&gt;The acceleration&lt;/h2&gt;






















  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
      
      
    
    
    
    


    
    
      
      

      


      

      
      
        
        
        
      
      
      
      

    
    

    
    
      &lt;figure class=""&gt;
      
          &lt;img alt="Confetti" class="img " height="1024" src="https://harper.blog/2025/04/17/an-llm-codegen-heros-journey/journey-confetti_hu_5c5b1e98a71e8689.webp" title="" width="1024" /&gt;
      
        &lt;figcaption class="caption-Confetti-at-a-Paul-McCartney-Concert-at-the-Tokyo-Dome-iPhone-6-4252015" id="caption-Confetti at a Paul McCartney Concert at the Tokyo Dome. iPhone 6, 4/25/2015"&gt;
          Confetti at a Paul McCartney Concert at the Tokyo Dome. iPhone 6, 4/25/2015
        &lt;/figcaption&gt;
      &lt;/figure&gt;
    

  
  







&lt;p&gt;I don’t know what will happen in the &lt;a href="https://ai-2027.com/"&gt;future&lt;/a&gt;. I am worried that people who are not working through this journey are not going to be attractive to &lt;a href="https://x.com/tobi/status/1909231499448401946"&gt;employers&lt;/a&gt;. Which is kind of near-sighted, because, ultimately, we are talking about tooling, and automation.&lt;/p&gt;
&lt;p&gt;When we were ramping up hiring in the past, we would often spread our queries well past our network, and past our tech stack. We would be a Python shop and interview people who didn’t know Python, and have never used Python. Our thought was that with a great engineer, we could work together to get them comfortable with Python. They would be additive even if they were not super comfortable with our stack. This worked out well for us. We hired incredible people who had never worked with our stack. Many times they brought such a different perspective that it elevated the entire team.&lt;/p&gt;
&lt;p&gt;The same principles apply to AI-assisted development. When hiring talented developers who match your team&amp;rsquo;s culture and show enthusiasm, their experience level with AI tools shouldn&amp;rsquo;t be a deal-breaker. Not everyone needs to be an AI development expert from day one. Instead, guide them through the learning process at their own pace while they work alongside more experienced team members.&lt;/p&gt;
&lt;p&gt;Eventually they will be the driver and will be successfully using these tools.&lt;/p&gt;
&lt;p&gt;One other aspect I keep thinking about: Writing skills have become critical. While we&amp;rsquo;ve always valued strong communicators on tech teams for documentation and collaboration, it&amp;rsquo;s doubly important now. Not only do you need to communicate with humans, you need to write clear, precise instructions for AI. Being able to craft effective prompts is becoming as vital as writing good code.&lt;/p&gt;
&lt;h2 id="the-leadership"&gt;The leadership&lt;/h2&gt;
&lt;p&gt;I think all leaders and engineering managers need to dive deep into AI-assisted development, whether you&amp;rsquo;re a believer or not. Here&amp;rsquo;s why: The next generation of developers you&amp;rsquo;ll be hiring will have learned to code primarily through AI tools and agents. This is what software engineering is becoming. We need to understand and adapt to this reality.&lt;/p&gt;
&lt;p&gt;Us code boomers are not long for this world.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;interesting note:&lt;/strong&gt; i don&amp;rsquo;t really use LLMs to help me write things. I imagine they would be good at it, but i find that i want my voice to be heard, and not normalized. Whereas my code needs to be normalized. interesting.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Thanks to Jesse, Sophie, the Vibez crew (Erik, Kanno, Braydon, and others), team 2389, and everyone else who gave me feedback on this post.&lt;/p&gt;

                                &lt;figure&gt;
                                    &lt;img alt="journey-confetti.webp" height="1024" src="https://harper.blog/2025/04/17/an-llm-codegen-heros-journey/journey-confetti.webp" width="1024" /&gt;
                                    
                                &lt;/figure&gt;
                                &lt;figure&gt;
                                    &lt;img alt="journey-harper.webp" height="768" src="https://harper.blog/2025/04/17/an-llm-codegen-heros-journey/journey-harper.webp" width="1024" /&gt;
                                    
                                &lt;/figure&gt;
                        
                        &lt;hr /&gt;
                        &lt;p&gt;Thank you for using RSS. I appreciate you. &lt;a href="mailto:harper&amp;#64;modest.com"&gt;Email me&lt;/a&gt;&lt;/p&gt;</description><pubDate>Thu, 17 Apr 2025 09:00:00 -0500</pubDate></item><item><title>Now @ 04-17-2025</title><link>https://harper.blog/now/2025-04-17/</link><description>&lt;h2 id="and-we-are-off"&gt;And we are off..&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;This company is started.&lt;/li&gt;
&lt;li&gt;We have raised some money from amazing people.&lt;/li&gt;
&lt;li&gt;I am excited to be building things again.&lt;/li&gt;
&lt;li&gt;Thinking a lot about what I want &lt;a href="https://2389.ai"&gt;2389 Research&lt;/a&gt; to turn into.&lt;/li&gt;
&lt;li&gt;I can&amp;rsquo;t wait to show you what we are building.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="the-weird"&gt;The weird&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;I am still feeling a deep sense of uncertainty.&lt;/li&gt;
&lt;li&gt;AI is coming for us faster than we thought.&lt;/li&gt;
&lt;li&gt;I don&amp;rsquo;t think people my age who are being laid off now are going to be able to find jobs equivalent to what they had before.&lt;/li&gt;
&lt;li&gt;The state of the US is very concerning at the moment.&lt;/li&gt;
&lt;/ul&gt;





















  
  
    
    &lt;img alt="" class="img   " height="" src="https://harper.blog/images/posts/worse.jpg" title="" width="" /&gt;
  
  






  


&lt;h3 id="the-normal"&gt;The normal&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Reading a lot of books. Send me your recs.&lt;/li&gt;
&lt;li&gt;Started bringing my camera everywhere, again. Come get your photo taken.&lt;/li&gt;
&lt;li&gt;Trying to meet people out and about. HMU. let&amp;rsquo;s get lunch&lt;/li&gt;
&lt;li&gt;Running is fun. Ugh. Very much type 2 fun.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="working-on-a-lot-of-tech-projects"&gt;Working on a lot of tech projects&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;I am an AI assistant.&lt;/li&gt;
&lt;li&gt;Trying to blog a lot more and at a regular cadence. Now with &lt;a href="https://harper.blog/notes/"&gt;notes&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Pretty excited about Bluesky and atproto specifically. Very neat.&lt;/li&gt;
&lt;li&gt;&lt;del&gt;I really want to merge my photos, writing, and read books into a single website. Thinking a lot about that. Give me ideas&lt;/del&gt; I think I am making progress! Now just need to figure out photos.&lt;/li&gt;
&lt;li&gt;Still, excited about the future. Although a bit worried about the present.&lt;/li&gt;
&lt;/ul&gt;

                        
                        &lt;hr /&gt;
                        &lt;p&gt;Thank you for using RSS. I appreciate you. &lt;a href="mailto:harper&amp;#64;modest.com"&gt;Email me&lt;/a&gt;&lt;/p&gt;</description><pubDate>Thu, 17 Apr 2025 00:00:00 -0500</pubDate></item><item><title>Waterfall in 15 Minutes or Your Money Back</title><link>https://harper.blog/2025/04/10/waterfall-in-15-minutes-or-your-money-back/</link><description>&lt;p&gt;I recently had a conversation with a friend that started out as a casual catch-up and spiraled into a deep exploration of AI-assisted coding and what it&amp;rsquo;s doing to our workflows, teams, and sense of &amp;ldquo;craft.&amp;rdquo; It spanned everything from rewriting old codebases to how automated test coverage changes the nature of programming.&lt;/p&gt;
&lt;p&gt;I took the transcript from granola, popped it into o1-pro, and asked it to write this blog post. Not terrible. Representative of my beliefs.&lt;/p&gt;
&lt;p&gt;I sent it to a few friends, and they all were interested in sending it to a few more friends. That means I gotta publish it. So here goes!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;this is a good reminder that if you get an email from someone and the writing is perfect and has no affectation - an AI probably wrote it. lol.&lt;/p&gt;&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2 id="waterfall-in-15-minutes-or-your-money-back"&gt;Waterfall in 15 Minutes or Your Money Back&lt;/h2&gt;
&lt;h3 id="the-new-normal-why-does-code-quality-even-matter"&gt;The New Normal: &amp;ldquo;Why Does Code Quality Even Matter?&amp;rdquo;&lt;/h3&gt;
&lt;p&gt;For years, we&amp;rsquo;ve talked about code as craft—how we get into that precious flow state, sculpt a piece of logic, and emerge victorious, artisanal bug fixes in hand. But there&amp;rsquo;s a new paradigm creeping in where code generation tools (think large language models, or LLMs) can effectively pump out features in minutes.&lt;/p&gt;
&lt;p&gt;Some folks are rattled by this pace and how it upends the old standards of &amp;ldquo;clean code.&amp;rdquo; Suddenly, writing robust test suites, or even test-driven development, is more about letting the bots verify themselves than it is about methodically stepping through each line of code.&lt;/p&gt;
&lt;p&gt;Will code quality nosedive? Possibly. On the other hand, we&amp;rsquo;re also seeing a push for hyper-defensive coding—static analysis, formal verification, and test coverage everywhere—so that if an AI-based agent does break something, we catch it quickly. We&amp;rsquo;ve never needed top-notch CI/CD pipelines and rigorous checks more than we do now.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="waterfall-in-15-minutes"&gt;Waterfall in 15 Minutes&lt;/h3&gt;





















  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
      
      
    
    
    
    


    
    
      
      

      


      

      
      
        
        
        
      
      
      
      

    
    

    
    
      &lt;figure class=""&gt;
      
          &lt;img alt="Waterfall" class="img " height="1024" src="https://harper.blog/2025/04/10/waterfall-in-15-minutes-or-your-money-back/waterfall_hu_60c8753e36607622.webp" title="" width="1024" /&gt;
      
        &lt;figcaption class="caption-Iceland-has-a-lot-of-waterfalls-Leica-Q-9302016" id="caption-Iceland has a lot of waterfalls. Leica Q, 9/30/2016"&gt;
          Iceland has a lot of waterfalls. Leica Q, 9/30/2016
        &lt;/figcaption&gt;
      &lt;/figure&gt;
    

  
  






  


&lt;p&gt;We used to talk about &amp;ldquo;Waterfall vs. Agile&amp;rdquo; as if they were moral opposites, with Agile the only correct path. But ironically, code generation is nudging us toward micro waterfall cycles: we carefully define a spec (because the AI needs clarity), press &amp;ldquo;go,&amp;rdquo; wait for the code to be generated, and review. It might still feel iterative, but in practice, we do a chunk of planning, then a chunk of execution, then a chunk of review. &amp;ldquo;Waterfall in 15 minutes.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;The real magic? You can spin up multiple &amp;ldquo;agents&amp;rdquo; simultaneously. While one AI is building a feature, another is handling your docs, and a third is chewing on your test coverage. That&amp;rsquo;s not exactly the old idea of a single, linear Waterfall—this is concurrency on steroids.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="the-coming-shift-in-team-culture"&gt;The Coming Shift in Team Culture&lt;/h3&gt;
&lt;p&gt;If you manage or lead an engineering team, you probably hear from the top: &amp;ldquo;What about AI to make us more productive?&amp;rdquo; But you may also sense that your existing team has varying levels of enthusiasm for these tools. Some are all-in—spinning up entire new features purely through prompt-driven coding—while others are protective of that craft identity.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s what I think works:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Run Small Pilots&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Pick an internal project, or maybe a side tool that doesn&amp;rsquo;t carry heavy production risk, and let a few curious engineers run wild with AI coding. Let them break stuff, experiment, see what happens when they trust the model a little too much, then watch how they incorporate best practices to rein it back in.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Rotate People In and Out&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Having a dedicated &amp;ldquo;AI-coded&amp;rdquo; side project means you can rotate team members—let them spend a week or two living in this new environment, learning from each other, and then bring those lessons back to the larger codebase.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Get Serious About Documentation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;AI &amp;ldquo;agents&amp;rdquo; often require extremely clear specs. Code generation is cheap, but guiding an LLM in the right direction costs careful planning. If you want your entire team to benefit, put the best specs and architecture docs you&amp;rsquo;ve ever written into a shared repository. You&amp;rsquo;ll thank yourself when people rotate on or off that project.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;h3 id="why-flow-state-may-be-overrated"&gt;Why Flow State May Be Overrated&lt;/h3&gt;
&lt;p&gt;One surprising takeaway: a lot of us got into coding because we love the flow state—the pure, heads-down, &amp;ldquo;zone&amp;rdquo; feeling. But AI coding doesn&amp;rsquo;t always foster that same immersion. You might spend an hour setting up prompts, letting the AI build stuff in the background, and occasionally popping over to approve or nudge it.&lt;/p&gt;
&lt;p&gt;For some folks, that&amp;rsquo;s jarring. For others—especially those who have kids or who juggle a million tasks—it&amp;rsquo;s liberating. When you can context-switch (check the AI&amp;rsquo;s output, jump back to real life, then come back to a functioning snippet), you realize there&amp;rsquo;s a new way to be productive that doesn&amp;rsquo;t revolve around long blocks of quiet time.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="does-this-mean-peak-programmer"&gt;Does This Mean &amp;ldquo;Peak Programmer?&amp;rdquo;&lt;/h3&gt;
&lt;p&gt;There&amp;rsquo;s chatter that once AI can generate code, we&amp;rsquo;ve hit &amp;ldquo;peak programmer&amp;rdquo;—that soon we won&amp;rsquo;t need as many engineers. That might be partly true if we&amp;rsquo;re talking about straightforward feature work or hooking up an API. But there are new complexities, too, around security, compliance, test coverage, and architecture.&lt;/p&gt;
&lt;p&gt;The real difference? &amp;ldquo;Strategic engineers&amp;rdquo; will flourish—those who can orchestrate multiple AI tools, keep an eye on code quality, and design new systems that scale. The folks who thrive will be part product manager, part architect, part QA, part developer. They&amp;rsquo;ll shape the prompts, define the tests, maintain quality, and handle all the edge cases an LLM doesn&amp;rsquo;t predict.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="pro-tips-from-the-front-lines"&gt;Pro Tips from the Front Lines&lt;/h3&gt;
&lt;p&gt;A few things I&amp;rsquo;ve personally learned the hard way:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Start Manually, Then Turn On the AI&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For iOS apps, initialize the project in Xcode first, so the auto-generated files don&amp;rsquo;t confuse the AI. Then let the AI fill in the rest.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Short, Clear Prompts Sometimes Outperform Long Instructions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Oddly, telling an LLM &amp;ldquo;make code better&amp;rdquo; can work as well as a super-elaborate prompt. Experiment—some models respond better to fewer constraints.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Use a &amp;ldquo;Checkpoint&amp;rdquo; Workflow&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Commit often, even if it&amp;rsquo;s &amp;ldquo;Commit –m &amp;lsquo;It passed the tests, I guess!&amp;rsquo;&amp;rdquo; AI can break everything just as quickly as it can fix it. Frequent commits give you easy rollback points.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Prevent AI from Over-Testing the Basics&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;AI loves to test everything, including whether a &lt;code&gt;for&lt;/code&gt; loop still loops. Stay vigilant, prune pointless tests, and keep your pipeline lean.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Document Absolutely Everything&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Let the AI generate big &amp;ldquo;Implementation Guides.&amp;rdquo; These guides not only help you but help the AI itself on subsequent passes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;h3 id="final-thoughts"&gt;Final Thoughts&lt;/h3&gt;





















  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
      
      
    
    
    
    


    
    
      
      

      


      

      
      
        
        
        
      
      
      
      

    
    

    
    
      &lt;figure class=""&gt;
      
          &lt;img alt="Road to the future" class="img " height="576" src="https://harper.blog/2025/04/10/waterfall-in-15-minutes-or-your-money-back/waterfall-road_hu_b129af1fabf9cd2a.webp" title="" width="1024" /&gt;
      
        &lt;figcaption class="caption-Road-to-the-future-Colorado-is-flat-Leica-Q-5142016" id="caption-Road to the future. Colorado is flat. Leica Q, 5/14/2016"&gt;
          Road to the future. Colorado is flat. Leica Q, 5/14/2016
        &lt;/figcaption&gt;
      &lt;/figure&gt;
    

  
  







&lt;p&gt;Our industry is shifting faster than it ever has. Some of our well-worn assumptions—like the centrality of the flow state, or big celebrations around meticulously hand-coded features—are about to look quaint. But that doesn&amp;rsquo;t mean we lose our creativity. Instead, it becomes about strategic orchestration—knowing what to build, how to describe it, and how to keep it from turning into a dumpster fire.&lt;/p&gt;
&lt;p&gt;In the end, we might see that what makes your product win isn&amp;rsquo;t brute-forcing code. It&amp;rsquo;s designing an experience users love. Because if we can spin up 10 versions of Instagram in a weekend, the tiebreaker won&amp;rsquo;t be how elegantly the code is written. It&amp;rsquo;ll be which one resonates with people—and that&amp;rsquo;s a design and product problem, not purely an engineering one.&lt;/p&gt;
&lt;p&gt;So welcome to the new waterfall—done in 15-minute cycles, with AI as your infinite junior engineer and your code pipeline on hyperdrive. It&amp;rsquo;s weird and wonderful and occasionally terrifying. And odds are, we&amp;rsquo;re all going to have to learn this dance one way or another.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;What a funny world we live in. I think things are going to continue to get weird. Let&amp;rsquo;s dig in&lt;/em&gt;&lt;/p&gt;

                                &lt;figure&gt;
                                    &lt;img alt="waterfall-road.jpg" height="3357" src="https://harper.blog/2025/04/10/waterfall-in-15-minutes-or-your-money-back/waterfall-road.jpg" width="5972" /&gt;
                                    
                                &lt;/figure&gt;
                                &lt;figure&gt;
                                    &lt;img alt="waterfall-road.webp" height="576" src="https://harper.blog/2025/04/10/waterfall-in-15-minutes-or-your-money-back/waterfall-road.webp" width="1024" /&gt;
                                    
                                &lt;/figure&gt;
                                &lt;figure&gt;
                                    &lt;img alt="waterfall.jpg" height="3654" src="https://harper.blog/2025/04/10/waterfall-in-15-minutes-or-your-money-back/waterfall.jpg" width="3654" /&gt;
                                    
                                &lt;/figure&gt;
                                &lt;figure&gt;
                                    &lt;img alt="waterfall.webp" height="1024" src="https://harper.blog/2025/04/10/waterfall-in-15-minutes-or-your-money-back/waterfall.webp" width="1024" /&gt;
                                    
                                &lt;/figure&gt;
                        
                        &lt;hr /&gt;
                        &lt;p&gt;Thank you for using RSS. I appreciate you. &lt;a href="mailto:harper&amp;#64;modest.com"&gt;Email me&lt;/a&gt;&lt;/p&gt;</description><pubDate>Thu, 10 Apr 2025 00:00:00 -0500</pubDate></item></channel></rss>